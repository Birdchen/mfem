                    Finite Element Discretization Library
                                   __
                       _ __ ___   / _|  ___  _ __ ___
                      | '_ ` _ \ | |_  / _ \| '_ ` _ \
                      | | | | | ||  _||  __/| | | | | |
                      |_| |_| |_||_|   \___||_| |_| |_|

                         http://mfem.googlecode.com


Version 3.0, released on Jan xx, 2015
=====================================

Improved documentation and build system
---------------------------------------
- Added interactive example documentation in examples/README.html. This should
  be the starting point for new users interested in MFEM's features.

- New Doxygen-based code documentation. Due to its size, users are expected to
  build this documentation themselves by typing make in the doc/ directory.
  (Alternatively, the pre-build documentation can be browsed online).

- New build system, based on GNU make which consists of configuration and build
  steps: "make config; make". The MFEM build options are exported, and can be
  included in external makefiles. Library installation is also supported. See
  "make help" and the INSTALL file for details.

- To build the examples use 'make' or 'make -j <np>' in the examples directory.
  Based on the current MFEM configuration this will build the serial or the
  parallel examples using the same config options as the library.

New and updated examples
------------------------
- Six new serial/parallel example codes, that demonstrate:
  * mixed pressure-velocity FEM for Darcy (Example 5)
  * non-conforming adaptive mesh refinement for Laplace (Example 6)
  * Laplace problem on a surface (Example 7)
  * Discontinuous Petrov-Galerkin (DPG) for Laplace (Example 8)
  * Discontinuous Galerkin (DG) time-dependent advection (Example 9)
  * time-dependent nonlinear elasticity (Example 10)

- Added command line options to all examples, and modified several of the serial
  ones to optionally use the serial direct solver UMFPACK.

- Simplified the elimination of Dirichlet boundary conditions in parallel.

- Grouped and documented the example code features in examples/README.html

Non-conforming adaptive mesh refinement
---------------------------------------
- Added support for general, isotropic and anisotropic, local non-conforming
  mesh refinement (using hanging nodes) in 2D and 3D, on quadrilateral,
  triangular and hexahedral meshes. High-order curved and surface meshes are
  also supported.

- The mesh is refined with Mesh::GeneralRefinement. The non-conforming mesh is
  represented as a mesh that is "cut" along non-conforming edges and faces in
  the internal NCMesh class. The only thing the user has to do to obtain a
  continous solution is to call BilinearForm::ConformingAssemble and
  GridFunction::ConformingProlongate before and after solving the linear system.
  The finite element space and grid functions are then updated with
  FiniteElementSpace::UpdateAndInterpolate().

Time-dependent problems, non-linear operators and ODE integrators
-----------------------------------------------------------------
- Added new abstract base class TimeDependentOperator and a set of explicit
  Runge-Kutta time integration classes in linalg/ode.?pp.

- Added classes for diagonally implicit Runge-Kutta (DIRK) time integrators
  based on the ImplicitSolve() method of TimeDependentOperator.

- Extended all coefficient classes to be optionally time-dependent.

- Added classes for general nonlinear finite element operators (deriving from
  NonlinearForm/ParNonlinearForm). Such operators have assemble-based action
  (Mult), and also support assembly of the gradient operator to enable inversion
  with Newton iteration.

Discontinuous Galerkin and Discontinuous Petrov-Galerkin methods
----------------------------------------------------------------
- Added support Discontinuous Galerkin (DG) face integrators in parallel by
  extending ParMesh with information for face-neighboring processors. Added DG
  support in ParFiniteElementSpace, ParBilinearForm and ParGridFunction.

- Introduced a new class of integrators for forms defined on the faces of the
  mesh (including interior and boundary faces), mainly intended for hybrid
  methods like HDG and DPG that employ facet (numerical trace) spaces.

Block systems and more rectangular Operator
-------------------------------------------
- Added classes BlockOperator, BlockVector and BlockMatrix for handling block
  systems with different components (e.g., pressure and velocity).

- New abstract class AbstractSparseMatrix, between Matrix and SparseMatrix

- Modified class Operator to have two separate sizes: "height" and "width" for
  the output and input sizes, respectively. The Size method is now deprecated.

- For backward compatibility, Defined a method Size in the classes DenseMatrix
  (returns width as before), SparseMatrix (returns height as before),
  DenseMatrixInverse (square matrix), BilinearForm (square matrix).

Linear and non-linear solvers
-----------------------------
- New abstract class Solver, with sub-classes for sparse smoothers, dense matrix
  inverse, iterative solvers (Krylov methods and Newton) and the hypre solvers.
  All Krylov methods were consolidated in linalg/solver.cpp and extended to work
  in parallel.

- Added several new classes of solvers and smoothers:
  * serial sparse direct solvers from the SuiteSparse library (UMFPACK)
  * HypreSmoother, giving access to the parallel ParCSR smoothers in hypre
  * polynomial smoothers: Chebyshev, Taubin and FIR
  * stationary linear iteration (SLI)
  * quadratic single linearly-constrained optimization problems with bounds

Miscellaneous
-------------
- Wrapped all classes/functions/objects in a namespace called "mfem".

- Automated the creation of quadrature rules to enable on-demand generation of
  arbitrary order rules for all geometries 1D/2D/3D geometries.

- Added support for saving collections of grid functions in format suitable for
  visualization with VisIt (visit.llnl.gov).

- Added support for 1D, surface and topologically periodic meshes, as well as a
  simple inline mesh format. See the data/ directory for examples.

- Added support for serial mesh optimization using the Mesquite mesh quality
  improvement toolkit (see mesh/mesquite.?pp and INSTALL for details).

- Made sure that MFEM can work in parallel with empty processors and with any
  MPI communicator.

- Improved high-order Bernstein basis support.

- Support for high-resolution timers (e.g. POSIX clocks).

- Improved error messages with several macros, such as MFEM_ABORT, MFEM_VERIFY,
  MFEM_ASSERT, MFEM_WARNING, etc.

- Improved portability for Windows (Visual Studio) and Mac OS X.

- Various simplifications, extensions, and bugfixes in the code.


Version 2.0, released on Nov 18, 2011
=====================================

Arbitrary order finite element spaces
-------------------------------------
- Added support for arbitrary high-order finite element spaces through the new
  classes H1_FECollection, L2_FECollection, RT_FECollection and ND_FECollection.
  These are based on a number of new FiniteElement sub-classes H1_*, L2_*, RT_*
  and ND_* elements of arbitrary order on all types of reference elements.

- The classes implement H1-conforming, L2-discontinuous, H(div)-conforming
  Raviart-Thomas and H(curl)-conforming Nedelec elements on triangular,
  quadrilateral, tetrahedral and hexahedral meshes. The only restriction on the
  order of the spaces is the availability of the required quadrature rules.

NURBS meshes and discretization spaces
--------------------------------------
- Added a collection of classes for serial and parallel meshes and
  discretization spaces using Non-uniform rational B-splines (NURBS) basis
  functions (files mesh/nurbs.?pp).

- The Mesh class supports the NURBS-specific refinement functions: KnotInsert
  and DegreeElevate. Example NURBS meshes can found in the 'data' directory with
  file names *-nurbs.mesh including an exact non-degenerate disc
  (disc-nurbs.mesh) and exact non-degenerate ball (ball-nurbs.mesh).

- We can handle arbitrary NURBS or standard, non-NURBS, finite element spaces on
  NURBS meshes. However, a NURBS finite element space requires an underlying
  NURBS mesh. Refinement of parallel NURBS meshes is not supported yet.

Discrete gradient, curl, etc. matrices
--------------------------------------
- Added a new class, DiscreteLinearOperator, that facilitates the construction
  of matrix representations for linear operators like gradient, curl, embedding,
  projection, etc. The corresponding local "interpolators" are similar to
  bilinear form integrators and derive from base class DiscreteInterpolator.
  Current interpolators include GradientInterpolator, IdentityInterpolator,
  CurlInterpolator and DivergenceInterpolator.

- Also available is a parallel version of DiscreteLinearOperator, which
  assembles parallel topological matrices (such as the discrete gradient, curl,
  etc.) in hypre's ParCSR format.

New integrators
---------------
- New linear (r.h.s.) integrator VectorFEBoundaryFluxLFIntegrator for
  assembling (u, v.n) on the boundary for scalar u and v in an RT space.

- New bilinear integrator VectorFECurlIntegrator for assembling (curl u, v) for
  u in a ND space and v in an RT space.

New and updated examples
------------------------
- Added a new serial/parallel Example code 4/4p, which solves a 2D or 3D H(Div)
  diffusion problem using the Raviart-Thomas finite elements. In parallel, the
  linear system is solved with the brand-new Auxiliary-space Divergence Solver
  (ADS) in hypre.

- Modified Example 1 to use isoparametric discretization (use the FE space from
  the mesh) including NURBS meshes and spaces.  Updated Example 2 to support
  arbitrary order spaces. Updated all examples to work with NURBS meshes and
  spaces, as well as to not use projection onto discontinuous polynomial spaces
  for visualization (this is now handled directly in GLVis when necessary).

- In all examples, switched to a uniform "solution" socket data type instead of
  the various previous "*_gf_data" data types.

- In the parallel examples, switched to parallel mesh and solution output, as
  well as to the new parallel socket format in place of PrintAsOne/SaveAsOne.

New hypre solvers
-----------------
- The parallel MFEM build now requires hypre 2.8.0b or newer.

- Extended HypreAMS and HypreADS to support (arbitrary) high-order ND/RT spaces,
  by internally constructing the high-order ParDiscreteLinearOperator gradient,
  curl and interpolation matrices. This makes the linear solve in Example 3p and
  4p significantly faster than before. Extended the HypreAMS object to also work
  for 2D H(div) problems.

Miscellaneous
-------------
- Added new class socketstream implementing two-way tcp/ip socket communications
  in the framework of C++ streams. Added new class socketserver implementing
  tcp/ip server functionality: listen on a given port for incoming connections,
  and accept them by assigning the new connection to a socketstream. These new
  classes are meant to replace the classes isockstream and osockstream. They
  allow MFEM code to update the mesh and solution via a single socket connection
  to a GLVis window.

- Added new Mesh and GridFunction constructors that combine multiple Mesh and
  GridFunction objects into one object. These are used in GLVis to visualize
  data saved in parallel. Removed obsolete code related to reading of parallel
  disjoint meshes.

- Added more quadrature rules on triangles and tetrahedra.

- Basic experimental OpenMP support (disabled by default). When enabled, OpenMP
  code is used for local matrix assembly, sparse matrix-vector product, and some
  vector operations.

- Added support for METIS 5.0 (not the default, see INSTALL).

- Various simplifications, extensions, and bugfixes in the code.


Version 1.2, released on Apr 08, 2011
=====================================

Parallel MPI-based version of the library based on hypre
--------------------------------------------------------
- New MPI parallel version of the library based on the ParCSR parallel matrix
  format from hypre and the metis graph partitioning library. This version
  supports parallel local refinement and parallel curved meshes, as well as
  several solvers from hypre.

New serial and parallel examples
--------------------------------
- Added a new example code describing an electromagnetic diffusion problem
  discretized with lowest order Nedelec finite elements (Example 3).

- Added parallel versions of all examples codes (files ex1p.cpp, ex2p.cpp and
  ex3p.cpp) based on hypre's BoomerAMG and AMS preconditioners.

Miscellaneous
-------------
- Added support for saving and reading linear and curved quadratic meshes in VTK
  format. The format is automatically recognized when opening a mesh file, and
  the boundary is reconstructed based on the actual domain boundary.

- The 'data' directory now contains a collection of various mesh files in the
  MFEM and VTK formats, including curved meshes and the mesh files that were
  previously in the 'examples' directory.

- Updated the default integration rule order for most of the linear form
  integrators.

- Added support for cubic hex elements.

- Bugfixes in the face orientation of 3D RT0 elements and in the VectorFEDomain
  linear form integrator.

- Various small fixes and styling updates.


Version 1.1, released on Sep 13, 2010
=====================================

New MFEM format for general meshes
----------------------------------
- New MFEM mesh v1.0 format with uniform structure for any dimension and support
  for curved meshes including in 3D.  Class Mesh will recognize and read the new
  format (in addition to all previously used formats) and Mesh::Print uses the
  new format by default. The old print function was renamed to Mesh::PrintXG.

New elasticity example
----------------------
- Added an example code for linear elasticity with (high-order) vector finite
  elements (Example 2).

Miscellaneous
-------------
- Added Mesh::PrintVTK and GridFunction::SaveVTK methods for output in VTK
  format.

- Implemented GeometryRefiner::Refine for CUBE and TETRAHEDRON geometries. This
  allows for saving curved meshes in the VTK format.

- Added SConstruct file for mfem/examples.

- Various small fixes and styling updates.


Version 1.0, released on Jul 21, 2010
=====================================

- Uploaded to http://mfem.googlecode.com.

- Initial release.

