                    Finite Element Discretization Library
                                   __
                       _ __ ___   / _|  ___  _ __ ___
                      | '_ ` _ \ | |_  / _ \| '_ ` _ \
                      | | | | | ||  _||  __/| | | | | |
                      |_| |_| |_||_|   \___||_| |_| |_|

                         http://mfem.googlecode.com


Version 2.0, released on Nov XX, 2012
=====================================

- Added support for arbitrary high-order finite element spaces through the new
  classes H1_FECollection, L2_FECollection, RT_FECollection and ND_FECollection.
  These are based on a number of new FiniteElement sub-classes H1_*, L2_*, RT_*
  and ND_* elements of arbitrary order on all types of reference elements.

  The classes implement H1-conforming, L2-discontinuous, H(div)-conforming
  Raviart-Thomas and H(curl)-conforming Nedelec elements on triangular,
  quadrilateral, tetrahedral and hexahedral meshes. The only restriction on the
  order of the spaces is the availability of the required quadrature rules.

- Simplified the input for and added more quadrature rules on triangles and
  tetrahedra.

- Added a collection of classes for serial and parallel Non-uniform rational
  B-splines (NURBS) discretizations (files mesh/nurbs.?pp).  Added support for
  NURBS-specific refinement functions: KnotInsert and DegreeElevate, as well as
  several NURBS meshes in data/*-nurbs.mesh.  We can handle arbitrary finite
  element spaces on NURBS meshes.

  Added support for reading NURBS meshes in "patch" format where instead of
  reading weights and a GridFunction, the control points and weights are read
  from individual patches. This is useful for defining new NURBS meshes. Added
  various support functions for reading, writing, constructing and manipulating
  NURBS patches.

- Added a new class, DiscreteLinearOperator, that facilitates the construction
  of matrix representations for linear operators like gradient, curl, embedding,
  projection, etc. The corresponding local "interpolators" are similar to
  bilinear form integrators and derive from base class DiscreteInterpolator.
  Current interpolators include GradientInterpolator, IdentityInterpolator,
  CurlInterpolator and DivergenceInterpolator. Also available is a parallel
  version of DiscreteLinearOperator, which assembles parallel topological
  matrices (such as the discrete gradient, curl, etc.) in hypre's ParCSR format.

- Added a new serial/parallel Example code 4/4p, which solves a 2D/3D H(Div)
  diffusion problem using the Raviart-Thomas finite elements. In parallel, the
  linear system is solved with the rand-new Auxiliary-space Divergence Solver
  (ADS) in hypre.

- Extended HypreAMS and HypreADS to support (arbitrary) high-order ND/RT spaces,
  by internally constructing the high-order ParDiscreteLinearOperator gradient,
  curl and interpolation matrices. This makes the linear solve in Example 3p and
  4p significantly faster than before. Extended the HypreAMS object to also work
  for 2D H(div) problems.

- Modified Example 1 to use isoparametric discretization (use the FE space from
  the mesh) including NURBS meshes and spaces.  Updated Example 2 to support
  arbitrary order spaces. Updated all examples to work with NURBS meshes and
  spaces, as well as to not use the projection onto discontinuous polynomial
  spaces (this is now handled directly in GLVis).

- Added new class socketstream implementing two-way tcp/ip socket communications
  in the framework of C++ streams. Added new class socketserver implementing
  tcp/ip server functionality: listen on a given port for incoming connections,
  and accept them by assigning the new connection to a socketstream. These new
  classes are meant to replace the classes isockstream and osockstream. They
  allow MFEM code to update the mesh and solution via a single socket connection
  to a GLVis window.

- Switched to a uniform "solution" socket data type instead of the various
  previous "*_gf_data" data types.

- In the parallel examples, switched to parallel mesh and solution output, as
  well as to the new parallel socket format in place of PrintAsOne/SaveAsOne.

- Added new Mesh and GridFunction constructors that combine multiple Mesh and
  GridFunction objects into one object. These are used in GLVis to visualize
  data saved in parallel. Removed obsolete code related to reading of parallel
  disjoint meshes.

- Adding a method ReorientTetMesh in Mesh and ParMesh to modify tetrahedral
  meshes so Nedelec spaces of order greater than 1 can be defined on them. Note
  that no further refinement is possible once this function is called.

- In ParMesh::ParMesh, re-enumerate the local vertices to preserve the global
  ordering, assign interior boundary elements on processor interface to only one
  of the two neighbors.

- Added a new files general/communication.?pp with classes GroupCommunicator and
  GroupTopology. The former implements some collective communications within
  groups of shared entities like DOFs. Reimplemented some of the methods of
  class ParFiniteElementSpace using an internally stored GroupCommunicator on
  the VDOF. Modified class ParMesh and class ParFiniteElementSpace to use
  GroupTopology.

- Added new classes Array2D and Array3D, and a function to transpose an
  Array<int> to a Table.

- Added new method Mesh::CartesianPartitioning for creating Cartesian
  partitions.

- Extended the reading of VTK input to directly support meshes that have been
  exported from VisIt.

- Added DenseMatrix::CalcSingularvalue and DenseMatrix::CalcEigenvalues methods
  for 2x2 and 3x3 matrices. Extended DenseMatrix::CalcInverse to compute left
  inverse for 2x1, 3x1 and 3x2 matrices. Added BLAS3 versions of DenseMatrix's
  MultAtB and MultABt.

- Added a new method MixedBilinearForm::GetBlocks that extracts the matrix as
  SparseMatrix blocks depending on the vector dimensions (vdim) of the trial and
  test spaces.

- Added a new method GridFunction::ProjectBdrCoefficientNormal that projects the
  normal component of a given VectorCoefficient on (a subset of) the boundary
  for a RT-type grid function. Adding a similar method for the tangential
  components in NT-type space, GridFunction::ProjectBdrCoefficientTangent.

- Adding an integrator VectorFEBoundaryFluxLFIntegrator for assembling (u, v.n)
  on the boundary for scalar u and v in a RT space.

- Extended GridFunction::GetNodalValues to handle vector FEs.

- Added new method ParGridFunction::ParallelAverage that does the averaging in a
  given HypreParVector.

- Added a new HypreParMatrix constructor, which builds a ParCSR matrix from a
  local nrows by global ncols CSR matrix on each processor.

- Switched to hypre-2.8.0b and added optional support for METIS 5.0.

- Switched from mpiCC to mpicxx.

- Bugfixes in the refinement of curved 2D meshes, GridFunction::Save and several
  other places.

- Various small fixes and styling updates.


Version 1.2, released on Apr 08, 2011
=====================================

- New MPI parallel version of the library based on the ParCSR parallel matrix
  format from hypre and the metis graph partitioning library. This version
  supports parallel local refinement and parallel curved meshes, as well as
  several solvers from hypre.

- Added a new example code describing an electromagnetic diffusion problem
  discretized with lowest order Nedelec finite elements (Example 3).

- Added parallel versions of all examples codes (files ex1p.cpp, ex2p.cpp and
  ex3p.cpp) based on hypre's BoomerAMG and AMS preconditioners.

- Added support for saving and reading linear and curved quadratic meshes in VTK
  format. The format is automatically recognized when opening a mesh file, and
  the boundary is reconstructed based on the actual domain boundary.

- The 'data' directory now contains a collection of various mesh files in the
  MFEM and VTK formats, including curved meshes and the mesh files that were
  previously in the 'examples' directory.

- Updated the default integration rule order for most of the linear form
  integrators.

- Added support for cubic hex elements.

- Bugfixes in the face orientation of 3D RT0 elements and in the VectorFEDomain
  linear form integrator.

- Various small fixes and styling updates.


Version 1.1, released on Sep 13, 2010
=====================================

- New MFEM mesh v1.0 format with uniform structure for any dimension and support
  for curved meshes including in 3D.  Class Mesh will recognize and read the new
  format (in addition to all previously used formats) and Mesh::Print uses the
  new format by default. The old print function was renamed to Mesh::PrintXG.

- Added an example code for linear elasticity with (high-order) vector finite
  elements (Example 2).

- Added Mesh::PrintVTK and GridFunction::SaveVTK methods for output in VTK
  format.

- Implemented GeometryRefiner::Refine for CUBE and TETRAHEDRON geometries. This
  allows for saving curved meshes in the VTK format.

- Added SConstruct file for mfem/examples.

- Various small fixes and styling updates.


Version 1.0, released on Jul 21, 2010
=====================================

- Uploaded to http://mfem.googlecode.com.

- Initial release.

