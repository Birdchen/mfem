// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

/*
  ---[ Defines Known At Compile-Time ]------------
  TILESIZE : Tilesize for iterating over entries
  ================================================
*/

@kernel void ExtractSubVector(const int entries,
                              @restrict const int *indices,
                              @restrict const double *in,
                              @restrict double *out) {

  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    if (i < entries) {
      out[i] = in[indices[i]]; // indices can be repeated
    }
  }
}

@kernel void SetSubVector(const int entries,
                          @restrict const int *indices,
                          @restrict const double *in,
                          @restrict double *out) {

  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    if (i < entries) {
      out[indices[i]] = in[i]; // indices CANNOT be repeated
    }
  }
}

@kernel void AddSubVector(const int num_unique_dst_indices,
                          @restrict const int *unique_dst_indices,
                          @restrict const int *unique_to_src_offsets,
                          @restrict const int *unique_to_src_indices,
                          @restrict const double *src,
                          @restrict double *dst) {

  for (int i = 0; i < num_unique_dst_indices; ++i;
       @tile(TILESIZE, @outer, @inner)) {

    if (i < num_unique_dst_indices) {
      const int dst_idx = unique_dst_indices[i];
      double sum = dst[dst_idx];
      const int end = unique_to_src_offsets[i+1];
      for (int j = unique_to_src_offsets[i]; j != end; ++j) {
        sum += src[unique_to_src_indices[j]];
      }
      dst[dst_idx] = sum;
    }
  }
}

@kernel void MapSubVector(const int entries,
                          @restrict const int *indices,
                          @restrict const double *in,
                          @restrict double *out) {

  for (int i = 0; i < entries; ++i; @tile(TILESIZE, @outer, @inner)) {
    if (i < entries) {
      const int fromIdx = indices[2*i + 0]; // fromIdx indices can be repeated
      const int toIdx   = indices[2*i + 1]; // toIdx indices CANNOT be repeated
      out[toIdx] = in[fromIdx];
    }
  }
}
